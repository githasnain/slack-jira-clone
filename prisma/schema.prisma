generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String            @id @default(cuid())
  name                   String?
  email                  String            @unique
  password               String?
  emailVerified          DateTime?
  image                  String?
  status                 UserStatus        @default(OFFLINE)
  role                   UserRole          @default(MEMBER)
  bio                    String?
  lastActive             DateTime          @default(now())
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  resetPasswordToken     String?
  resetPasswordExpires   DateTime?
  otpCode                String?
  otpExpires             DateTime?
  isActive               Boolean           @default(true)
  lastLoginAt            DateTime?
  loginAttempts          Int               @default(0)
  lockedUntil            DateTime?
  accounts               Account[]
  adminActions           AdminAction[]     @relation("AdminActions")
  channels               ChannelMember[]
  receivedDirectMessages DirectMessage[]   @relation("ReceivedMessages")
  sentDirectMessages     DirectMessage[]   @relation("SentMessages")
  messages               Message[]
  reactions              MessageReaction[]
  projects               ProjectMember[]
  sessions               Session[]
  systemLogs             SystemLog[]       @relation("UserSystemLogs")
  tasks                  Task[]
  teams                  TeamMember[]
  documentRequests       DocumentRequest[] @relation("DocumentRequestCreator")
  documentUploads        DocumentUpload[]  @relation("DocumentUploader")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id          String    @id @default(cuid())
  name        String
  description String?
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  channels    Channel[]
  projects    Project[]
}

model Channel {
  id          String          @id @default(cuid())
  name        String
  description String?
  type        ChannelType     @default(PUBLIC)
  workspaceId String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  members     ChannelMember[]
  messages    Message[]
}

model ChannelMember {
  id        String      @id @default(cuid())
  channelId String
  userId    String
  role      ChannelRole @default(MEMBER)
  joinedAt  DateTime    @default(now())
  channel   Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
}

model Message {
  id          String              @id @default(cuid())
  content     String
  type        MessageType         @default(TEXT)
  channelId   String?
  userId      String
  parentId    String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  channel     Channel?            @relation(fields: [channelId], references: [id], onDelete: Cascade)
  parent      Message?            @relation("MessageReplies", fields: [parentId], references: [id])
  replies     Message[]           @relation("MessageReplies")
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments MessageAttachment[]
  reactions   MessageReaction[]
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
}

model MessageAttachment {
  id        String   @id @default(cuid())
  messageId String
  filename  String
  url       String
  size      Int
  type      String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model DirectMessage {
  id         String      @id @default(cuid())
  content    String
  type       MessageType @default(TEXT)
  senderId   String
  receiverId String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  receiver   User        @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User        @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
}

model Project {
  id          String          @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus   @default(ACTIVE)
  progress    Int             @default(0)
  dueDate     DateTime?
  workspaceId String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  tasks       Task[]
  teams       Team[]
}

model ProjectMember {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  type        TeamType     @default(FRONTEND)
  projectId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tasks       Task[]
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  members     TeamMember[]
}

model TeamMember {
  id       String   @id @default(cuid())
  teamId   String
  userId   String
  role     TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  assigneeId  String?
  projectId   String?
  teamId      String?
  assignBy    String?
  assignTo    String?
  createdBy   String?
  dueDate     DateTime?
  tags        String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  assignee    User?      @relation(fields: [assigneeId], references: [id])
  project     Project?   @relation(fields: [projectId], references: [id])
  team        Team?      @relation(fields: [teamId], references: [id])
}

model SystemLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation("UserSystemLogs", fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model AdminAction {
  id         String   @id @default(cuid())
  adminId    String
  action     String
  targetType String?
  targetId   String?
  details    String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  admin      User     @relation("AdminActions", fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([createdAt])
}

enum UserStatus {
  ONLINE
  AWAY
  OFFLINE
}

enum UserRole {
  ADMIN
  MEMBER
  GUEST
}

enum ChannelType {
  PUBLIC
  PRIVATE
}

enum ChannelRole {
  ADMIN
  MEMBER
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  ON_HOLD
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TeamType {
  FRONTEND
  BACKEND
  DESIGN
}

enum TeamRole {
  LEAD
  MEMBER
}

model DocumentRequest {
  id          String   @id @default(cuid())
  title       String
  description String?
  isActive    Boolean  @default(true)
  dueDate     DateTime?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  creator     User           @relation("DocumentRequestCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  uploads     DocumentUpload[]
  
  @@map("document_requests")
}

model DocumentUpload {
  id               String   @id @default(cuid())
  fileName         String
  originalName     String
  fileSize         Int
  mimeType         String
  filePath         String
  uploadedBy       String
  documentRequestId String
  createdAt        DateTime @default(now())
  
  // Relations
  uploader         User           @relation("DocumentUploader", fields: [uploadedBy], references: [id], onDelete: Cascade)
  documentRequest  DocumentRequest @relation(fields: [documentRequestId], references: [id], onDelete: Cascade)
  
  @@map("document_uploads")
}
