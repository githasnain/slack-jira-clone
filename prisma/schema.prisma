// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  status        UserStatus @default(OFFLINE)
  role          UserRole   @default(MEMBER)
  bio           String?
  lastActive    DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Password reset fields
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  otpCode             String?
  otpExpires          DateTime?
  
  // Admin fields
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  loginAttempts Int      @default(0)
  lockedUntil   DateTime?

  accounts Account[]
  sessions Session[]
  messages Message[]
  reactions MessageReaction[]
  tasks    Task[]
  projects ProjectMember[]
  channels ChannelMember[]
  teams    TeamMember[]
  sentDirectMessages DirectMessage[] @relation("SentMessages")
  receivedDirectMessages DirectMessage[] @relation("ReceivedMessages")
  systemLogs SystemLog[] @relation("UserSystemLogs")
  adminActions AdminAction[] @relation("AdminActions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  channels Channel[]
  projects Project[]
}

model Channel {
  id          String      @id @default(cuid())
  name        String
  description String?
  type        ChannelType @default(PUBLIC)
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  workspace Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages  Message[]
  members   ChannelMember[]
}

model ChannelMember {
  id        String   @id @default(cuid())
  channelId String
  userId    String
  role      ChannelRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
}

model Message {
  id        String      @id @default(cuid())
  content   String
  type      MessageType @default(TEXT)
  channelId String?
  userId    String
  parentId  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  channel Channel? @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent  Message? @relation("MessageReplies", fields: [parentId], references: [id])
  replies Message[] @relation("MessageReplies")
  reactions MessageReaction[]
  attachments MessageAttachment[]
}

model MessageReaction {
  id        String @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
}

model MessageAttachment {
  id        String @id @default(cuid())
  messageId String
  filename  String
  url       String
  size      Int
  type      String
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model DirectMessage {
  id        String   @id @default(cuid())
  content   String
  type      MessageType @default(TEXT)
  senderId  String
  receiverId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  progress    Int           @default(0)
  dueDate     DateTime?
  workspaceId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  members   ProjectMember[]
  teams     Team[]
  tasks     Task[]
}

model ProjectMember {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        TeamType @default(FRONTEND)
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]
  members TeamMember[]
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      TeamRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  assigneeId  String?
  projectId   String
  teamId      String?
  dueDate     DateTime?
  tags        String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  assignee User?    @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team     Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
}

// Enums
enum UserStatus {
  ONLINE
  AWAY
  OFFLINE
}

enum UserRole {
  ADMIN
  MEMBER
  GUEST
}

enum ChannelType {
  PUBLIC
  PRIVATE
}

enum ChannelRole {
  ADMIN
  MEMBER
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  ON_HOLD
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TeamType {
  FRONTEND
  BACKEND
  DESIGN
}

enum TeamRole {
  LEAD
  MEMBER
}

// System Logs and Admin Actions
model SystemLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation("UserSystemLogs", fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([createdAt])
}

model AdminAction {
  id          String   @id @default(cuid())
  adminId     String
  action      String
  targetType  String?  // USER, PROJECT, TASK, etc.
  targetId    String?
  details     String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  admin User @relation("AdminActions", fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([createdAt])
}